/*
 * generated by Xtext 2.10.0
 */
package com.beenleigh.dsl.ide.contentassist.antlr;

import com.beenleigh.dsl.ide.contentassist.antlr.internal.InternalLemmaParser;
import com.beenleigh.dsl.services.LemmaGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class LemmaParser extends AbstractContentAssistParser {

	@Inject
	private LemmaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLemmaParser createParser() {
		InternalLemmaParser result = new InternalLemmaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractItemAccess().getAlternatives(), "rule__AbstractItem__Alternatives");
					put(grammarAccess.getContainerElementAccess().getAlternatives(), "rule__ContainerElement__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
					put(grammarAccess.getDataClassAccess().getGroup(), "rule__DataClass__Group__0");
					put(grammarAccess.getDataClassAccess().getGroup_2(), "rule__DataClass__Group_2__0");
					put(grammarAccess.getDataElementAccess().getGroup(), "rule__DataElement__Group__0");
					put(grammarAccess.getLemmamodelAccess().getElementsAssignment(), "rule__Lemmamodel__ElementsAssignment");
					put(grammarAccess.getDataModelAccess().getNameAssignment_1(), "rule__DataModel__NameAssignment_1");
					put(grammarAccess.getDataModelAccess().getElementsAssignment_3(), "rule__DataModel__ElementsAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
					put(grammarAccess.getDataClassAccess().getNameAssignment_1(), "rule__DataClass__NameAssignment_1");
					put(grammarAccess.getDataClassAccess().getSuperTypeAssignment_2_1(), "rule__DataClass__SuperTypeAssignment_2_1");
					put(grammarAccess.getDataClassAccess().getDataelementsAssignment_4(), "rule__DataClass__DataelementsAssignment_4");
					put(grammarAccess.getDataElementAccess().getNameAssignment_1(), "rule__DataElement__NameAssignment_1");
					put(grammarAccess.getDataElementAccess().getTypeAssignment_3(), "rule__DataElement__TypeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalLemmaParser typedParser = (InternalLemmaParser) parser;
			typedParser.entryRuleLemmamodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LemmaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LemmaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
